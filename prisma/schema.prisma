generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  githubId      String?   @unique

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  apiKeys        ApiKey[]
  casts          Cast[]
  spells         Spell[]   @relation("SpellAuthor")
  budget         Budget?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Spell {
  id              String   @id @default(cuid())
  key             String   @unique // e.g. "com.acme.resize"
  name            String
  description     String
  longDescription String?  @db.Text
  version         String   @default("1.0.0")

  // Pricing
  priceModel      String   // "flat" | "metered" | "one_time"
  priceAmount     Float    // in cents
  priceCurrency   String   @default("USD")

  // Execution
  executionMode   String   // "workflow" | "service" | "clone"

  // Metadata
  tags            String[] // ["image", "media"]
  category        String?
  rating          Float    @default(0)
  totalCasts      Int      @default(0)

  // Schema
  inputSchema     Json?
  outputSchema    Json?

  // Author
  authorId        String
  author          User     @relation("SpellAuthor", fields: [authorId], references: [id])

  // Status
  status          String   @default("active") // "active" | "suspended" | "archived"

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  casts           Cast[]

  @@map("spells")
  @@index([authorId])
  @@index([status])
  @@index([executionMode])
}

model Cast {
  id              String   @id @default(cuid())

  // Spell info
  spellId         String
  spell           Spell    @relation(fields: [spellId], references: [id])

  // User info
  casterId        String
  caster          User     @relation(fields: [casterId], references: [id])

  // Execution
  status          String   @default("queued") // "queued" | "running" | "succeeded" | "failed"
  inputHash       String?
  startedAt       DateTime?
  finishedAt      DateTime?
  duration        Int?     // milliseconds

  // Cost
  costCents       Int      @default(0)

  // Artifacts
  artifactUrl     String?
  errorMessage    String?  @db.Text

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("casts")
  @@index([spellId])
  @@index([casterId])
  @@index([status])
  @@index([createdAt])
}

model Budget {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])

  monthlyCap      Float    @default(100.00) // in dollars
  currentSpend    Float    @default(0)

  lastResetAt     DateTime @default(now())

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("budgets")
}

model ApiKey {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])

  name            String   // User-friendly name
  key             String   @unique // sk_live_...

  lastUsedAt      DateTime?
  status          String   @default("active") // "active" | "revoked"

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("api_keys")
  @@index([userId])
  @@index([key])
}
